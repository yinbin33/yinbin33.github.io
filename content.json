{"pages":[{"title":"about","text":"","link":"/about/index.html"}],"posts":[{"title":"Lambda","text":"Lambda表达式1. 基本特点 代码清晰 改善代码臃肿 函数类型编程 兼容接口升级 2. 实现方式 Lambda语法 方法引用 接口default方法实现 @FunctionalInterface接口 类型是接口类型，而不是注释类型、枚举或类。 该注解需满足函数接口^1的要求。 3. 局限性 单一抽象方法 Lambda调试困难 Stream API操作能力有限 4. 常用模式（scfp = Supplier + Consumer + Function + Predicate） Supplier：提供者，形如无参有返回值 Consumer：消费者，形如有参无返回值 Function：函数，形如有参有返回值 Predicate：断言，有参有返回值，返回boolean 接口 参数 返回类型 Predicate T boolean Consumer T void Function&lt;T, R&gt; T R Supplier None T UnaryOperator T T BinaryOperator (T,T) T 示例 【Predicate】判断一个值是否大于5 12345678910public class PredicateDemo { public static void main(String[] args) { Predicate&lt;Integer&gt; predicate = a -&gt; a &gt; 5; System.out.println(\"是否大于5： \" + predicate.test(12)); }}// 输出结果:// 是否大于5： true 【BinaryOperator】计算两个整数之和 12345678910public class BinaryOperaterDemo { public static void main(String[] args) { BinaryOperator&lt;Integer&gt; operator = (a, b) -&gt; a * b; System.out.println(\"5 * 8 = \" + operator.apply(5, 8)); }}// 输出结果：// 5 * 8 = 40","link":"/2020/05/21/Lambda/"},{"title":"Java","text":"这是测试文件","link":"/2020/05/21/Java/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/05/21/hello-world/"}],"tags":[{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"Lambda","slug":"Lambda","link":"/tags/Lambda/"}],"categories":[]}